trigger:
- master

pr:
- master

variables:
  solution: 'src/ShaderTools.sln'
  buildConfiguration: 'Release'

jobs:

- job: VS
  
  strategy:
    matrix:
      VS2017:
        imageName: 'vs2017-win2016'
        vsVersion: VS2017
      VS2019:
        imageName: 'windows-2019'
        vsVersion: VS2019
  
  pool:
    vmImage: $(imageName)
  
  steps:
  
  - task: NuGetToolInstaller@0
    displayName: 'Install NuGet'
    inputs:
      versionSpec: '5.1.0'

  - task: DotNetCoreCLI@2
    displayName: 'Restore NuGet Packages (dotnet)'
    inputs:
      command: restore
      projects: '$(solution)'

  - task: NuGetCommand@2
    displayName: 'Restore NuGet Packages (nuget)'
    inputs:
      restoreSolution: '$(solution)'
  
  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(solution)'
      configuration: $(buildConfiguration)

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'
      
  - task: PublishPipelineArtifact@1
    displayName: Publish Artifact
    condition: and(succeeded(), eq(variables['vsVersion'], 'VS2019'))
    inputs:
      artifactName: VisualStudio
      path: 'src/ShaderTools.Editor.VisualStudio/bin/$(buildConfiguration)/ShaderTools.Editor.VisualStudio.vsix'

- job: VSCode_Build

  strategy:
    matrix:
      Windows:
        imageName: 'windows-2019'
        rid: win-x64
        binaryExtension: '.exe'
      macOS:
        imageName: 'macOS-latest'
        rid: osx-x64
        binaryExtension: ''
      Linux:
        imageName: 'ubuntu-latest'
        rid: linux-x64
        binaryExtension: ''
  
  pool:
    vmImage: $(imageName)

  steps:

  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK'
    inputs:
      version: 2.1.x

  - script: dotnet tool install --global dotnet-warp
    displayName: 'Install dotnet-warp'

  - powershell: New-Item -ItemType Directory -Path src/ShaderTools.LanguageServer/build/$(rid)

  - script: dotnet-warp . --verbose --rid $(rid) --output build/$(rid)/ShaderTools.LanguageServer$(binaryExtension)
    displayName: 'Build Language Server'
    workingDirectory: 'src/ShaderTools.LanguageServer'

  - task: PublishPipelineArtifact@1
    displayName: Publish Artifact
    inputs:
      artifactName: LanguageServer-$(rid)
      path: 'src/ShaderTools.LanguageServer/build/$(rid)/ShaderTools.LanguageServer$(binaryExtension)'

- job: VSCode_Create_Package
  dependsOn: 'VSCode_Build'

  pool:
    vmImage: 'ubuntu-latest'

  steps:

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Windows LSP binary'
    inputs:
      artifactName: LanguageServer-win-x64
      targetPath: 'src/ShaderTools.VSCode/bin/win-x64'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download macOS LSP binary'
    inputs:
      artifactName: LanguageServer-osx-x64
      targetPath: 'src/ShaderTools.VSCode/bin/osx-x64'

  - task: DownloadPipelineArtifact@2
    displayName: 'Download Linux LSP binary'
    inputs:
      artifactName: LanguageServer-linux-x64
      targetPath: 'src/ShaderTools.VSCode/bin/linux-x64'

  - script: chmod +x src/ShaderTools.VSCode/bin/osx-x64/ShaderTools.LanguageServer
    displayName: 'Set permissions on macOS LSP binary'

  - script: chmod +x src/ShaderTools.VSCode/bin/linux-x64/ShaderTools.LanguageServer
    displayName: 'Set permissions on Linux LSP binary'

  - script: npm ci
    displayName: npm ci
    workingDirectory: 'src/ShaderTools.VSCode'

  - script: sudo npm install -g vsce
    displayName: 'Install vsce'
    workingDirectory: 'src/ShaderTools.VSCode'

  - powershell: New-Item -ItemType Directory -Path src/ShaderTools.VSCode/package

  - script: vsce package -o package/HlslToolsVSCode.vsix
    displayName: 'Create VSIX'
    workingDirectory: 'src/ShaderTools.VSCode'

  - task: PublishPipelineArtifact@1
    displayName: Publish Artifact
    inputs:
      artifactName: VSCode
      targetPath: 'src/ShaderTools.VSCode/package/HlslToolsVSCode.vsix'